---
title: "Class 05: Data Visualization"
author: "Alex Cagle (PID: A15661779)"
format: html
editor: visual
---

```{r}
library(ggplot2)

# install.packages("dplyr")  ## un-comment to install if needed
library(dplyr)

# installing/loading the package:
# if(!require(installr)) {
#  install.packages("installr"); 
#  require(installr)
# } #load / install+load installr

# using the package:
#updateR()

```

## Base R Graphics vs. ggplot2

There are many graphics systems available in R, including so-called "base" R graphics and the very popular **ggplot2** package.

To compare these, let's play with the inbuilt `cars` dataset.

```{r}
head(cars)
# head(cars, 10)
```

To use "base" R, I can simply call the `plot()` function:

```{r}
plot(cars)
```

To use `ggplot2` package, I first need to install it with the function `install.package("ggplot2")`.

I will run this in my R console (i.e. the R brain) as I do not want to re-install it every time I render my report.

```{r}
ggplot(data=cars) +
  aes(x=speed, y=dist) +
  geom_point() +
  geom_smooth()
```

To make a figure with ggplot, I always need at least 3 things:

-   data (i.e. what I want to plot)

-   aesthetics (i.e. how the plot looks, aesthetic mapping of the data to the plot)

-   the geoms (i.e. how I want to plot the data with different geometries)

GGplot is much more verbose than base R plots for standard plots, but it has a consistent layer system that I can use to make just about any plot.

```{r}
ggplot(data=cars) +
  aes(x=speed, y=dist) +
  geom_point() +
  geom_smooth(method = 'lm', se = FALSE) +
  labs(
       title="Stopping distance for old cars", 
       x = "Speed (MPG)", 
       y = "Stopping Distance (ft)", 
       subtitle = "From the inbuilt cars dataset"
       ) +
  theme_bw()
```

### A More Complicated Plot

```{r}
url <- "https://bioboot.github.io/bimm143_S20/class-material/up_down_expression.txt"
genes <- read.delim(url)
head(genes)
```

> Q: How many genes are in this dataset?

```{r}
nrow(genes)
```

> Q: How can we summarize that last column - the "State" column?

```{r}
table(genes$State)
```

```{r}
colnames(genes)
ncol(genes)
```

>
>
> **Q.** Using your values above and 2 significant figures. What fraction of total genes is up-regulated in this dataset?

```{r}
# Ratio of up-regulated genes to total genes
127 / 5196

answer <- 0.024
```

```{r}
plt <- ggplot(data=genes) +
  aes(x=Condition1, y=Condition2, col=State) +
  geom_point() +
  xlab("Control") +
  ylab("Drug treated")
```

I can now just call `plt` when I want to plot or add to it.

```{r}
plt + ggtitle("genes")
```

```{r}
p <- ggplot(genes) +
  aes(x = Condition1, y = Condition2, color = State) +
  geom_point()

p + labs(title = "Gene Expression changes upon drug treatment", 
         x = "Control", 
         y = "Drug tested") +
  scale_color_manual(values = c("green", "black", "red"))
```

## Going further

Here I read a slightly larger dataset

```{r}
# File location online
url <- "https://raw.githubusercontent.com/jennybc/gapminder/master/inst/extdata/gapminder.tsv"

gapminder <- read.delim(url)

head(gapminder)
```

```{r}
ggplot(data = gapminder) +
  aes(x = gdpPercap, y = lifeExp, col = continent) +
  geom_point(alpha = 0.3)
```

A very useful layer to add sometimes is for "faceting."

```{r}

```

`{ggplot(data = gapminder) +}   aes(x = gdpPercap, y = lifeExp, col = continent, size = pop) +   geom_point(alpha = 0.3) +   facet_wrap(~continent)`

```{r}
gapminder_2007 <- gapminder %>% filter(year==2007)
```

```{r}
gapminder_top5 <- gapminder %>% 
  filter(year==2007) %>% 
  arrange(desc(pop)) %>% 
  top_n(5, pop)

gapminder_top5
ggplot(gapminder_top5) + 
  geom_col(aes(x = country, y = pop))
```

# Lab 5 Questions

> **Q1.** For which phases is data visualization important in our scientific workflows?

```{r}
ans1 <- "All of the above"
```

> **Q2.** True or False? The ggplot2 package comes already installed with R?

```{r}
ans2 <- FALSE
```

> **Q3.** Which plot types are typically NOT used to compare distributions of numeric variables?

```{r}
ans3 <- "Network graphs"
```

> **Q4.** Which statement about data visualization with ggplot2 is incorrect?

```{r}
ans4 <- "It is incorrect to say that ggplot2 is the only way to create plots in R, since we can also use plot()."
```

> **Q5.** Which geometric layer should be used to create scatter plots in ggplot2?

```{r}
ans5 <- geom_point()
```

> **Q6.** Use the `nrow()` function to find out how many genes are in this dataset. What is your answer?

```{r}
ans6 <- 5196
```

> **Q7.** Use the `colnames()` function and the `ncol()` function on the `genes` data frame to find out what the column names are (we will need these later) and how many columns there are. How many columns did you find?

```{r}
ans7 <- 4
```

> **Q8.** Use the `table()` function on the `State` column of this data.frame to find out how many \'up\' regulated genes there are. What is your answer?

```{r}
ans8 <- 127
```

> **Q9.** Using your values above and 2 significant figures. What fraction of total genes is up-regulated in this dataset?

```{r}
ans9 <- 0.024
```
